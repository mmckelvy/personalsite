/** 
* MIXINS
**/
/** 
* Flexbox mixins
**/

displayFlex()
	display flex 
	display -webkit-flex

rowWrap()
	flex-flow row wrap
	-webkit-flex-flow row wrap

flexEr(flexGrow, flexShrink, flexBasis)
	flex flexGrow flexShrink flexBasis
	-webkit-flex flexGrow flexShrink flexBasis

flexHzCenter()
	justify-content center
	-webkit-justify-content center

flexHzRight()
	justify-content flex-end
	-webkit-justify-content flex-end

flexVtCenter()
	align-items center
	-webkit-align-items center	

/**
* Grid mixins
**/
	
/*
@function: createContainer.
@description: Creates containers.
@param: padding is the padding on the right AND left.
@param: width-* is the pixel width of the parent container.  xs, sm, md, etc. are screen sizes.  Will use the next smallest screen size if an arg is omitted (e.g. if you use just pass '1024px' then all screens will have a 1024px width for the container).
*/ 
createContainer(padding = $primary-padding, width-xs, width-sm = width-xs, width-md = width-sm, width-lg = width-md, width-xl = width-lg)
	
	width: width-xs
	marginCenter()
	padding-left: padding
	padding-right: padding

	@media $screen-sm-min
		width: width-sm

	@media $screen-md-min
		width: width-md

	@media $screen-lg-min
		width: width-lg

	@media $screen-xl-min
		width: width-xl

/*
@function: createRow.
@description: Creates rows.
@param: margin is the negative margin on the right and left.  Prevents double padding on beginning and ending columns.
*/
createRow(margin = $primary-padding)
	margin-left: margin * -1
	margin-right: margin * -1
	clearfix()

/*
@function: createColumn
@description: Creates columns.
@param: padding is the padding on the right AND left.  Thus gutters will be equal to 2x padding.
@param: pct-* is the percent width of the parent container.  xs, sm, md, etc. are screen sizes.  Will use the next smallest screen size if an arg is omitted (e.g. if you use just pass '30%' then all screens will have a 30% width for the column)
*/

createColumn(padding = $primary-padding, pct-xs, pct-sm = pct-xs, pct-md = pct-sm, pct-lg = pct-md, pct-xl = pct-lg)
	width: pct-xs // Widths are percentages of the parent element.
	padding-left: padding
	padding-right: padding
	float: left
	min-height: 1px
	position: relative;

	@media $screen-sm-min
		width: pct-sm

	@media $screen-md-min
		width: pct-md

	@media $screen-lg-min
		width: pct-lg

	@media $screen-xl-min
		width: pct-xl

/*********** Positioning mixins ***********/

clearfix()
	&:before,
	&:after 
		content: "";
		display: table;
	
	&:after 
		clear: both;

// Center block level elements setting margin right / left to auto
marginCenter()
	margin-left auto
	margin-right auto

// Set horizontal padding
hzPadding(padding)
	padding-left padding
	padding-right padding

/*********** Element mixins ***********/
backgrounds(url, position, size, repeat)
	background-image url(url)
	background-position position
	background-size size
	background-repeat repeat

background-linear-gradient(startPoint, startColor, startInterval, endColor, endInterval)
	background-color startColor
	background-image -webkit-linear-gradient(startPoint, startColor startInterval, endColor endInterval)
	background-image -moz-linear-gradient(startPoint, startColor startInterval, endColor endInterval)
	background-image -ms-linear-gradient(startPoint, startColor startInterval, endColor endInterval)
	background-image -o-linear-gradient(startPoint, startColor startInterval, endColor endInterval)
	background-image linear-gradient(startPoint, startColor startInterval, endColor endInterval)

easeOutTrs(property = all, duration = 450ms, easeFn = $ease-fn, delay = 0ms)
	transition: property duration easeFn delay
	




